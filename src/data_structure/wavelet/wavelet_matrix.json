{
    "code": "#pragma once\n#include \"../../common.hpp\"\n#include \"bit_vector.hpp\"\ntemplate<typename T>\nclass WaveletMatrix\n{\npublic:\n    WaveletMatrix(Vec<T> vs)\n        : m_n(vs.size()),\n          m_min{vs[minInd(vs)]},\n          m_max{vs[maxInd(vs)]},\n          m_lg{bitWidth(m_max + 1)},\n          m_bvs(m_lg, BitVector(m_n))\n    {\n        assert(m_min >= 0);\n        Vec<T> nvs(m_n);\n        for (int bi : per(m_lg)) {\n            for (int i : rep(m_n)) {\n                if (isBitOn(vs[i], bi)) { m_bvs[bi].set(i); }\n            }\n            int is[2] = {0, m_bvs[bi].zero()};\n            for (int i : rep(m_n)) { nvs[is[isBitOn(vs[i], bi)]++] = vs[i]; }\n            std::swap(vs, nvs);\n        }\n    }\n    int rangeFreq(int l, int r, T vmin, T vsup)\n    {\n        assert(0 <= l and l <= r and r <= m_n);\n        assert(vmin <= vsup);\n        return lessFreq(l, r, vsup) - lessFreq(l, r, vmin);\n    }\n    T quantile(int l, int r, int k)\n    {\n        assert(0 <= l and l <= r and r <= m_n);\n        assert(0 <= k and k < r - l);\n        T ans = 0;\n        for (int bi : per(m_lg)) {\n            const int lz = m_bvs[bi].rank0(l), rz = m_bvs[bi].rank0(r);\n            if (rz - lz <= k) {\n                const int z = m_bvs[bi].zero();\n                ans |= (T{1} << bi);\n                k -= (rz - lz);\n                l += z - lz, r += z - rz;\n            } else {\n                l = lz, r = rz;\n            }\n        }\n        return ans;\n    }\n\nprivate:\n    int lessFreq(int l, int r, T v)\n    {\n        assert(0 <= l and l <= r and r <= m_n);\n        if (v <= m_min) { return 0; }\n        if (v - 1 >= m_max) { return r - l; }\n        int ans = 0;\n        for (int bi : per(m_lg)) {\n            const int lz = m_bvs[bi].rank0(l), rz = m_bvs[bi].rank0(r);\n            if (isBitOn(v, bi)) {\n                const int z = m_bvs[bi].zero();\n                ans += rz - lz;\n                l += z - lz, r += z - rz;\n            } else {\n                l = lz, r = rz;\n            }\n        }\n        return ans;\n    }\n    int m_n;\n    T m_min, m_max;\n    int m_lg;\n    Vec<BitVector> m_bvs;\n};\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/wavelet/wavelet_matrix.rangefreq.test.cpp",
        "verifications/data_structure/wavelet/wavelet_matrix.quantile.test.cpp"
    ]
}