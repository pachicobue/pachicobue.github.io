{
    "code": "#pragma once\n#include \"type.hpp\"\n#include \"macro.hpp\"\ntemplate<typename Vs, typename V>\nconstexpr void fillAll(Vs& arr, const V& v)\n{\n    if constexpr (std::is_convertible<V, Vs>::value) {\n        arr = v;\n    } else {\n        for (auto& subarr : arr) { fillAll(subarr, v); }\n    }\n}\ntemplate<typename Vs>\nconstexpr void sortAll(Vs& vs)\n{\n    std::sort(ALL(vs));\n}\ntemplate<typename Vs, typename C>\nconstexpr void sortAll(Vs& vs, C comp)\n{\n    std::sort(ALL(vs), comp);\n}\ntemplate<typename Vs>\nconstexpr void reverseAll(Vs& vs)\n{\n    std::reverse(ALL(vs));\n}\ntemplate<typename Vs>\nconstexpr Vs reversed(const Vs& vs)\n{\n    auto rvs = vs;\n    reverseAll(rvs);\n    return rvs;\n}\ntemplate<typename V, typename Vs>\nconstexpr V sumAll(const Vs& vs)\n{\n    if constexpr (std::is_convertible<Vs, V>::value) {\n        return static_cast<V>(vs);\n    } else {\n        V ans = 0;\n        for (const auto& v : vs) { ans += sumAll<V>(v); }\n        return ans;\n    }\n}\ntemplate<typename Vs>\nconstexpr int minInd(const Vs& vs)\n{\n    return std::min_element(ALL(vs)) - std::begin(vs);\n}\ntemplate<typename Vs>\nconstexpr int maxInd(const Vs& vs)\n{\n    return std::max_element(ALL(vs)) - std::begin(vs);\n}\ntemplate<typename Vs, typename V>\nconstexpr int lbInd(const Vs& vs, const V& v)\n{\n    return std::lower_bound(ALL(vs), v) - std::begin(vs);\n}\ntemplate<typename Vs, typename V>\nconstexpr int ubInd(const Vs& vs, const V& v)\n{\n    return std::upper_bound(ALL(vs), v) - std::begin(vs);\n}\ntemplate<typename Vs, typename V>\nconstexpr void plusAll(Vs& vs, const V& v)\n{\n    for (auto& v_ : vs) { v_ += v; }\n}\ntemplate<typename Vs>\nconstexpr void concat(Vs& vs1, const Vs& vs2)\n{\n    std::copy(ALL(vs2), std::back_inserter(vs1));\n}\ntemplate<typename Vs>\nconstexpr void concatted(const Vs& vs1, const Vs& vs2)\n{\n    auto vs = vs1;\n    concat(vs, vs2);\n    return vs;\n}\ntemplate<typename T, typename F>\nconstexpr Vec<T> genVec(int n, F gen)\n{\n    Vec<T> ans;\n    std::generate_n(std::back_inserter(ans), n, gen);\n    return ans;\n}\ntemplate<typename T = int>\nconstexpr Vec<T> iotaVec(int n, T offset = 0)\n{\n    Vec<T> ans(n);\n    std::iota(ALL(ans), offset);\n    return ans;\n}\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/wavelet/wavelet_matrix.rangefreq.test.cpp",
        "verifications/data_structure/wavelet/wavelet_matrix.quantile.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/queue.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/deque.test.cpp",
        "verifications/data_structure/sparse_table/disjoint_sparse_table.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rMq.test.cpp",
        "verifications/data_structure/union_find_tree/union_find_tree.test.cpp",
        "verifications/data_structure/segment_tree/segtree_beats.test.cpp",
        "verifications/data_structure/segment_tree/segtree.test.cpp",
        "verifications/data_structure/segment_tree/dual_segtree.test.cpp",
        "verifications/data_structure/segment_tree/lazy_segtree.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.max_right.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.test.cpp",
        "verifications/graph/bellman_ford.test.cpp",
        "verifications/graph/floyd_warshall.test.cpp",
        "verifications/graph/dijkstra.test.cpp",
        "verifications/graph/strongly_connected_components.test.cpp",
        "verifications/graph/tree/least_common_ancestor.test.cpp",
        "verifications/graph/tree/level_ancestor.ut.test.cpp",
        "verifications/graph/tree/level_ancestor.lca.test.cpp",
        "verifications/graph/tree/heavy_light_decomposition.test.cpp",
        "verifications/graph/tree/centroid_decomposition.test.cpp",
        "verifications/graph/tree/diameter.test.cpp",
        "verifications/set_power_series/xor_convolution.test.cpp",
        "verifications/set_power_series/and_convolution.test.cpp",
        "verifications/set_power_series/subset_convolution.test.cpp",
        "verifications/set_power_series/or_convolution.test.cpp",
        "verifications/numerical/convolution.ut.test.cpp",
        "verifications/number/mod_nthroot.yuki.test.cpp",
        "verifications/number/mod_sqrt.test.cpp",
        "verifications/number/divisors.test.cpp",
        "verifications/number/discrete_log.test.cpp",
        "verifications/number/prime_factors.test.cpp",
        "verifications/number/multiplicative_prefix_sum.totient.test.cpp",
        "verifications/number/prime_powersum.primecount.test.cpp",
        "verifications/number/mod_nthroot.test.cpp",
        "verifications/linear_algebra/int_bases.test.cpp",
        "verifications/linear_algebra/bit_bases.ut.test.cpp",
        "verifications/linear_algebra/int_bases.ut.test.cpp",
        "verifications/linear_algebra/bit_bases.test.cpp",
        "verifications/linear_algebra/dynamic_matrix.test.cpp",
        "verifications/linear_algebra/static_matrix.test.cpp",
        "verifications/algorithm/linear_floor_sum.test.cpp",
        "verifications/algorithm/mo.test.cpp",
        "verifications/string/z_algorithm.test.cpp",
        "verifications/string/manacher.test.cpp",
        "verifications/string/morris_pratt.ut.test.cpp",
        "verifications/string/suffix_array.test.cpp",
        "verifications/formal_power_series/berlekamp_massey.test.cpp",
        "verifications/formal_power_series/formal_power_series.exp.test.cpp",
        "verifications/formal_power_series/formal_power_series.log.test.cpp",
        "verifications/formal_power_series/formal_power_series.pow.test.cpp",
        "verifications/formal_power_series/formal_power_series.inv.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution1000000007.test.cpp",
        "verifications/formal_power_series/bostan_mori.test.cpp",
        "verifications/common/container_op.reverseAll.test.cpp",
        "verifications/common/container_op.test.cpp",
        "verifications/common/container_op.sumAll.test.cpp",
        "verifications/common/container_op.sortAll.test.cpp",
        "verifications/common/container_op.fillAll.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.segment.test.cpp",
        "verifications/convex_hull_trick/monotone_cht.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.line.test.cpp",
        "verifications/utility/io.test.cpp",
        "verifications/utility/scanner.ut.test.cpp",
        "verifications/utility/nd_vec.ut.test.cpp",
        "verifications/utility/zipper.ut.test.cpp",
        "verifications/utility/printer.ut.test.cpp",
        "verifications/utility/int_nthroot.test.cpp",
        "verifications/utility/nd_rep.ut.test.cpp",
        "verifications/utility/rng.ut.test.cpp",
        "verifications/formal_dirichlet_series/gcd_convolution.test.cpp",
        "verifications/formal_dirichlet_series/lcm_convolution.test.cpp"
    ]
}