{
    "code": "// verification-helper: UNITTEST\n#include \"common/irange.hpp\"\n\nvoid repTest()\n{\n    std::vector<int> is;\n    for (int i : rep(5)) { is.push_back(i); }\n    assert(is == std::vector<int>({0, 1, 2, 3, 4}));\n}\n\nvoid perTest()\n{\n    std::vector<int> is;\n    for (int i : per(5)) { is.push_back(i); }\n    assert(is == std::vector<int>({4, 3, 2, 1, 0}));\n}\n\nvoid irangeTest1()\n{\n    std::vector<int> is1;\n    for (int i : irange(2, 5)) { is1.push_back(i); }\n    assert(is1 == std::vector<int>({2, 3, 4}));\n\n    std::vector<int> is2;\n    for (int i : irange(2, 10, 3)) { is2.push_back(i); }\n    assert(is2 == std::vector<int>({2, 5, 8}));\n\n    std::vector<int> is3;\n    for (int i : irange(2, 11, 3)) { is3.push_back(i); }\n    assert(is3 == std::vector<int>({2, 5, 8}));\n\n    std::vector<int> is4;\n    for (int i : irange(2, 1, 3)) { is4.push_back(i); }\n    assert(is4.empty());\n}\n\nvoid irangeTest2()\n{\n    std::vector<int> is2;\n    for (int i : irange(10, 2, -3)) { is2.push_back(i); }\n    assert(is2 == std::vector<int>({10, 7, 4}));\n\n    std::vector<int> is3;\n    for (int i : irange(11, 2, -3)) { is3.push_back(i); }\n    assert(is3 == std::vector<int>({11, 8, 5}));\n\n    std::vector<int> is4;\n    for (int i : irange(1, 2, -3)) { is4.push_back(i); }\n    assert(is4.empty());\n}\nvoid irangeTest3()\n{\n    long long min = 10000000000LL;\n    long long sup = 10000000000LL + 3;\n    std::vector<i64> is;\n    for (i64 i : irange(min, sup)) { is.push_back(i); }\n    assert(is == std::vector<long long>({min, min + 1, min + 2}));\n}\n\nvoid loopTest()\n{\n    int cnt = 0;\n    LOOP (100) { cnt++; };\n    assert(cnt == 100);\n}\n\nint main()\n{\n    repTest();\n    perTest();\n    irangeTest1();\n    irangeTest2();\n    irangeTest3();\n    loopTest();\n    return 0;\n}\n",
    "result": "AC"
}