{
    "code": "// verification-helper: UNITTEST\n#include \"common/container_op.hpp\"\n\nvoid Primitive1DArrTest()\n{\n    int vs[6] = {1, 3, 1, 2, 3, 2};\n    const int sum1 = sumAll<int>(vs);\n    int sum2 = 0;\n    for (int i = 0; i < 6; i++) { sum2 += vs[i]; }\n    assert(sum1 == sum2);\n}\nvoid Primitive2DArrTest()\n{\n    int vss[2][6] = {{1, 3, 1, 2, 3, 2}, {3, 1, 4, 1, 5, 9}};\n    const int sum1 = sumAll<int>(vss);\n    int sum2 = 0;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 6; j++) { sum2 += vss[i][j]; }\n    }\n    assert(sum1 == sum2);\n}\nvoid Vec1DArrTest()\n{\n    Vec<int> vs{1, 3, 1, 2, 3, 2};\n    const int sum1 = sumAll<int>(vs);\n    int sum2 = 0;\n    for (int i = 0; i < 6; i++) { sum2 += vs[i]; }\n    assert(sum1 == sum2);\n}\nvoid Vec2DArrTest()\n{\n    Vec<Vec<int>> vss{{1, 3, 1, 2, 3, 2}, {3, 1, 4, 1, 5, 9}};\n    const int sum1 = sumAll<int>(vss);\n    int sum2 = 0;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 6; j++) { sum2 += vss[i][j]; }\n    }\n    assert(sum1 == sum2);\n}\nvoid Arr1DArrTest()\n{\n    Arr<int, 6> vs{1, 3, 1, 2, 3, 2};\n    const int sum1 = sumAll<int>(vs);\n    int sum2 = 0;\n    for (int i = 0; i < 6; i++) { sum2 += vs[i]; }\n    assert(sum1 == sum2);\n}\nvoid Arr2DArrTest()\n{\n    Arr<Arr<int, 6>, 2> vss{{{1, 3, 1, 2, 3, 2}, {3, 1, 4, 1, 5, 9}}};\n    const int sum1 = sumAll<int>(vss);\n    int sum2 = 0;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 6; j++) { sum2 += vss[i][j]; }\n    }\n    assert(sum1 == sum2);\n}\nvoid Deq1DArrTest()\n{\n    Deq<int> vs{1, 3, 1, 2, 3, 2};\n    const int sum1 = sumAll<int>(vs);\n    int sum2 = 0;\n    for (int i = 0; i < 6; i++) { sum2 += vs[i]; }\n    assert(sum1 == sum2);\n}\nvoid Deq2DArrTest()\n{\n    Deq<Deq<int>> vss{{1, 3, 1, 2, 3, 2}, {3, 1, 4, 1, 5, 9}};\n    const int sum1 = sumAll<int>(vss);\n    int sum2 = 0;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 6; j++) { sum2 += vss[i][j]; }\n    }\n    assert(sum1 == sum2);\n}\nvoid CastTest()\n{\n    Vec<int> vs{1 << 30, 1 << 30, 1 << 30, 1 << 30, 1 << 30, 1 << 30};\n    const int sum1 = sumAll<int>(vs);\n    const i64 sum2 = sumAll<i64>(vs);\n    i64 sum3 = 0;\n    for (int i = 0; i < 6; i++) { sum3 += vs[i]; }\n    assert(sum1 != sum3);\n    assert(sum2 == sum3);\n}\nint main()\n{\n    Primitive1DArrTest();\n    Primitive2DArrTest();\n    Vec1DArrTest();\n    Vec2DArrTest();\n    Arr1DArrTest();\n    Arr2DArrTest();\n    Deq1DArrTest();\n    Deq2DArrTest();\n    CastTest();\n    return 0;\n}\n",
    "result": "AC"
}