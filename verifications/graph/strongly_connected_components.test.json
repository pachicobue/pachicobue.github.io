{
    "code": "// verification-helper: PROBLEM https://judge.yosupo.jp/problem/scc\n#include \"graph/strongly_connected_components.hpp\"\n#include \"graph/topological_sort.hpp\"\n#include \"utility/printer.hpp\"\n#include \"utility/scanner.hpp\"\nint main()\n{\n    const auto [N, M] = in.tup<int, int>();\n    Graph g(N);\n    LOOP (M) {\n        const auto [a, b] = in.tup<int, int>();\n        g.addEdge(a, b);\n    }\n    const auto scc = StronglyConnectedComponents(g);\n    const int C = scc.cnum();\n    Graph dag(C);\n    for (int u : rep(N)) {\n        const int uc = scc[u];\n        for (const int v : g[u]) {\n            const int vc = scc[v];\n            if (uc == vc) { continue; }\n            dag.addEdge(uc, vc);\n        }\n    }\n    Vec<Vec<int>> cvs(C);\n    for (int i : rep(N)) { cvs[scc[i]].push_back(i); }\n    const auto [flag, cs] = topologicalSort(dag);\n    assert(flag);\n    out.ln(C);\n    for (int c : cs) { out.ln(cvs[c].size(), cvs[c]); }\n    return 0;\n}\n",
    "result": "AC"
}