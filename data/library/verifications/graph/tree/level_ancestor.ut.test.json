{
    "code": "// verification-helper: UNITTEST\n#include \"graph/tree/level_ancestor.hpp\"\n\nvoid Test()\n{\n    Graph g(10);\n    g.addEdge(1, 2, true);\n    g.addEdge(2, 0, true);\n    g.addEdge(2, 3, true);\n    g.addEdge(1, 9, true);\n    g.addEdge(1, 4, true);\n    g.addEdge(4, 5, true);\n    g.addEdge(4, 8, true);\n    g.addEdge(5, 6, true);\n    g.addEdge(5, 7, true);\n    LevelAncestor la(g, 1);\n    assert(la(0, 0) == 0);\n    assert(la(0, 1) == 2);\n    assert(la(0, 2) == 1);\n\n    assert(la(1, 0) == 1);\n\n    assert(la(2, 0) == 2);\n    assert(la(2, 1) == 1);\n\n    assert(la(3, 0) == 3);\n    assert(la(3, 1) == 2);\n    assert(la(3, 2) == 1);\n\n    assert(la(4, 0) == 4);\n    assert(la(4, 1) == 1);\n\n    assert(la(5, 0) == 5);\n    assert(la(5, 1) == 4);\n    assert(la(5, 2) == 1);\n\n    assert(la(6, 0) == 6);\n    assert(la(6, 1) == 5);\n    assert(la(6, 2) == 4);\n    assert(la(6, 3) == 1);\n\n    assert(la(7, 0) == 7);\n    assert(la(7, 1) == 5);\n    assert(la(7, 2) == 4);\n    assert(la(7, 3) == 1);\n\n    assert(la(8, 0) == 8);\n    assert(la(8, 1) == 4);\n    assert(la(8, 2) == 1);\n\n    assert(la(9, 0) == 9);\n    assert(la(9, 1) == 1);\n}\nint main()\n{\n    Test();\n    return 0;\n}\n",
    "result": "AC"
}