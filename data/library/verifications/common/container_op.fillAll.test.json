{
    "code": "// verification-helper: UNITTEST\n#include \"common/container_op.hpp\"\n\nvoid PrimitiveArr1DTest()\n{\n    int vs[5] = {1, 3, 5, 2, 4};\n    fillAll(vs, 1);\n    for (int i = 0; i < 5; i++) { assert(vs[i] == 1); }\n}\nvoid PrimitiveArr2DTest()\n{\n    int vs[2][5] = {{1, 3, 5, 2, 4}, {3, 1, 4, 1, 5}};\n    fillAll(vs, 1);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 5; j++) { assert(vs[i][j] == 1); }\n    }\n}\nvoid Vec1DTest()\n{\n    Vec<int> vs{1, 3, 5, 2, 4};\n    fillAll(vs, 1);\n    for (int i = 0; i < 5; i++) { assert(vs[i] == 1); }\n}\nvoid Vec2DTest()\n{\n    Vec<Vec<int>> vss{{1, 3, 5, 2, 4}, {3, 1, 4, 1, 5}};\n    fillAll(vss, 1);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 5; j++) { assert(vss[i][j] == 1); }\n    }\n}\nvoid Arr1DTest()\n{\n    Arr<int, 5> vs{1, 3, 5, 2, 4};\n    fillAll(vs, 1);\n    for (int i = 0; i < 5; i++) { assert(vs[i] == 1); }\n}\nvoid Arr2DTest()\n{\n    Arr<Arr<int, 5>, 2> vss{{{1, 3, 5, 2, 4}, {3, 1, 4, 1, 5}}};\n    fillAll(vss, 1);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 5; j++) { assert(vss[i][j] == 1); }\n    }\n}\nvoid Deq1DTest()\n{\n    Deq<int> vs{1, 3, 5, 2, 4};\n    fillAll(vs, 1);\n    for (int i = 0; i < 5; i++) { assert(vs[i] == 1); }\n}\nvoid Deq2DTest()\n{\n    Deq<Deq<int>> vss{{1, 3, 5, 2, 4}, {3, 1, 4, 1, 5}};\n    fillAll(vss, 1);\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 5; j++) { assert(vss[i][j] == 1); }\n    }\n}\nvoid CastTest()\n{\n    Vec<i64> vs{1, 3, 5, 2, 4};\n    fillAll(vs, (short)1);\n    for (int i = 0; i < 5; i++) { assert(vs[i] == 1); }\n}\n\nint main()\n{\n    PrimitiveArr1DTest();\n    PrimitiveArr2DTest();\n    Vec1DTest();\n    Vec2DTest();\n    Arr1DTest();\n    Arr2DTest();\n    Deq1DTest();\n    Deq2DTest();\n    CastTest();\n    return 0;\n}\n",
    "result": "AC"
}