{
    "code": "// verification-helper: UNITTEST\n#include \"common.hpp\"\n#include \"utility/scanner.hpp\"\n\nstd::stringstream ss;\nScanner scanner{ss};\n\nclass C\n{\npublic:\n    C() = default;\n    C(int s_) : s{s_} {}\n    friend Istream& operator>>(Istream& is, C& cls)\n    {\n        char c;\n        is >> c;\n        assert(c == '{');\n        is >> cls.s;\n        is >> c;\n        assert(c == '}');\n        return is;\n    }\n    friend bool operator==(const C& c1, const C& c2) { return c1.s == c2.s; }\n\nprivate:\n    int s;\n};\n\nvoid valTest()\n{\n    {\n        const int v = 100;\n        ss << \"100\";\n        const auto rv = scanner.val<int>();\n        assert(v == rv);\n        ss.clear();\n    }\n    {\n        const char c = 'a';\n        ss << \"a\";\n        const auto rc = scanner.val<char>();\n        assert(c == rc);\n        ss.clear();\n    }\n    {\n        const Str s = \"ABCabc012\";\n        ss << \"ABCabc012\";\n        const auto rs = scanner.val<Str>();\n        assert(s == rs);\n        ss.clear();\n    }\n    {\n        const C cls{100};\n        ss << \"{100}\";\n        const auto rcls = scanner.val<C>();\n        assert(cls == rcls);\n        ss.clear();\n    }\n}\n\nvoid valOffsetTest()\n{\n    {\n        const int v = 100;\n        const int offset = 10;\n        ss << \"100\";\n        const auto rv = scanner.val<int>(offset);\n        assert(v - offset == rv);\n        ss.clear();\n    }\n}\n\nvoid vecTest()\n{\n    const int n = 5;\n    Vec<int> vs = {1, 2, 3, 4, 5};\n    ss << \"1 2 3 4 5\";\n    const auto rvs = scanner.vec<int>(n);\n    for (int i : rep(n)) { assert(vs[i] == rvs[i]); }\n    ss.clear();\n}\n\nvoid vecOffsetTest()\n{\n    const int n = 5;\n    const int offset = 1;\n    Vec<int> vs = {1, 2, 3, 4, 5};\n    ss << \"1 2 3 4 5\";\n    const auto rvs = scanner.vec<int>(n, offset);\n    for (int i : rep(n)) { assert(vs[i] - offset == rvs[i]); }\n    ss.clear();\n}\n\nvoid vvecTest()\n{\n    const int m = 2;\n    const int n = 3;\n    Vec<Vec<int>> vss = {{1, 2, 3}, {4, 5, 6}};\n    ss << \"1 2 3\\n\"\n          \"4 5 6\";\n    const auto rvss = scanner.vvec<int>(m, n);\n    for (int i : rep(m)) {\n        for (int j : rep(n)) { assert(vss[i][j] == rvss[i][j]); }\n    }\n    ss.clear();\n}\n\nvoid vvecOffsetTest()\n{\n    const int m = 2;\n    const int n = 3;\n    const int offset = 1;\n    Vec<Vec<int>> vss = {{1, 2, 3}, {4, 5, 6}};\n    ss << \"1 2 3\\n\"\n          \"4 5 6\";\n    const auto rvss = scanner.vvec<int>(m, n, offset);\n    for (int i : rep(m)) {\n        for (int j : rep(n)) { assert(vss[i][j] - offset == rvss[i][j]); }\n    }\n    ss.clear();\n}\n\nvoid tupTest()\n{\n    const int v = 100;\n    const char c = 'a';\n    const Str s = \"abcABC012\";\n    const C cls{100};\n    ss << \"100 a abcABC012 {100}\";\n    const auto [rv, rc, rs, rcls] = scanner.tup<int, char, Str, C>();\n    assert(v == rv);\n    assert(c == rc);\n    assert(s == rs);\n    assert(cls == rcls);\n    ss.clear();\n}\n\nvoid tupOffsetTest()\n{\n    const int v1 = 100;\n    const int v2 = 1000;\n    const int offset1 = 10;\n    const int offset2 = 100;\n    ss << \"100 1000\";\n    const auto [rv1, rv2] = scanner.tup<int, int>(offset1, offset2);\n    assert(v1 - offset1 == rv1);\n    assert(v2 - offset2 == rv2);\n    ss.clear();\n}\n\nint main()\n{\n    valTest();\n    valOffsetTest();\n    vecTest();\n    vecOffsetTest();\n    vvecTest();\n    vvecOffsetTest();\n    tupTest();\n    tupOffsetTest();\n    return 0;\n}\n",
    "result": "AC"
}