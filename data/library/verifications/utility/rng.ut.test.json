{
    "code": "// verification-helper: UNITTEST\n#include \"utility/rng.hpp\"\n\nvoid Test()\n{\n    const u64 v32_1 = rng();\n    const u64 v64_1 = rng64();\n    assert(0_u64 <= v32_1 and v32_1 <= 0xFFFFFFFF_u64);\n    assert(0_u64 <= v64_1 and v64_1 <= 0xFFFFFFFFFFFFFFFF_u64);\n}\n\nvoid valTest()\n{\n    int min = 10, max = 20;\n    const int v32_1 = rng.val(min, max);\n    const int v64_1 = rng64.val(min, max);\n    assert(min <= v32_1 and v32_1 <= max);\n    assert(min <= v64_1 and v64_1 <= max);\n}\n\nvoid vecTest()\n{\n    int n = 10;\n    int min = 10, max = 20;\n    const auto vs32_1 = rng.vec(n, min, max);\n    const auto vs64_1 = rng64.vec(n, min, max);\n    for (const auto v : vs32_1) { assert(min <= v and v <= max); }\n    for (const auto v : vs64_1) { assert(min <= v and v <= max); }\n}\n\nvoid vvecTest()\n{\n    int m = 3, n = 4;\n    int min = 10, max = 20;\n    const auto vss32_1 = rng.vvec(m, n, min, max);\n    const auto vss64_1 = rng64.vvec(m, n, min, max);\n    for (const auto& vs : vss32_1) {\n        for (auto v : vs) { assert(min <= v and v <= max); }\n    }\n    for (const auto& vs : vss64_1) {\n        for (auto v : vs) { assert(min <= v and v <= max); }\n    }\n}\n\nint main()\n{\n    Test();\n    valTest();\n    vecTest();\n    vvecTest();\n    return 0;\n}\n",
    "result": "AC"
}