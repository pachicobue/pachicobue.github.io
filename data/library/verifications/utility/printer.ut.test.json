{
    "code": "// verification-helper: UNITTEST\n#include \"common.hpp\"\n#include \"utility/printer.hpp\"\n\nstd::stringstream ss;\nPrinter printer{ss};\n\nclass C\n{\npublic:\n    C(int s_) : s{s_} {}\n    friend Ostream& operator<<(Ostream& os, const C& cls) { return os << \"{\" << cls.s << \"}\"; }\n\nprivate:\n    int s;\n};\n\nvoid valTest()\n{\n    {\n        const int v = 100;\n        printer(v);\n        assert(ss.str() == \"100\");\n        ss.str(\"\");\n\n        printer.ln(v);\n        assert(ss.str() == \"100\\n\");\n        ss.str(\"\");\n\n        printer.el(v);\n        assert(ss.str() == \"100\\n\");\n        ss.str(\"\");\n    }\n\n    {\n        const char c = 'a';\n        printer(c);\n        assert(ss.str() == \"a\");\n        ss.str(\"\");\n\n        printer.ln(c);\n        assert(ss.str() == \"a\\n\");\n        ss.str(\"\");\n\n        printer.el(c);\n        assert(ss.str() == \"a\\n\");\n        ss.str(\"\");\n    }\n\n    {\n        const Str s = \"abcABC012\";\n        printer(s);\n        assert(ss.str() == \"abcABC012\");\n        ss.str(\"\");\n\n        printer.ln(s);\n        assert(ss.str() == \"abcABC012\\n\");\n        ss.str(\"\");\n\n        printer.el(s);\n        assert(ss.str() == \"abcABC012\\n\");\n        ss.str(\"\");\n    }\n\n    {\n        const C cls{100};\n        printer(cls);\n        assert(ss.str() == \"{100}\");\n        ss.str(\"\");\n\n        printer.ln(cls);\n        assert(ss.str() == \"{100}\\n\");\n        ss.str(\"\");\n\n        printer.el(cls);\n        assert(ss.str() == \"{100}\\n\");\n        ss.str(\"\");\n    }\n}\n\nvoid valsTest()\n{\n    const int v = 100;\n    const char c = 'a';\n    const Str s = \"abcABC012\";\n    const C cls{100};\n\n    printer(v, c, s, cls);\n    assert(ss.str() == \"100 a abcABC012 {100}\");\n    ss.str(\"\");\n\n    printer.ln(v, c, s, cls);\n    assert(ss.str() == \"100 a abcABC012 {100}\\n\");\n    ss.str(\"\");\n\n    printer.el(v, c, s, cls);\n    assert(ss.str() == \"100 a abcABC012 {100}\\n\");\n    ss.str(\"\");\n}\n\nint main()\n{\n    valTest();\n    valsTest();\n    return 0;\n}\n",
    "result": "AC"
}