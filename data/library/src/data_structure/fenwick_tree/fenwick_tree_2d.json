{
    "code": "#pragma once\n#include \"../../common.hpp\"\ntemplate<typename T>\nclass FenwickTree2D\n{\npublic:\n    FenwickTree2D(const Vec<Vec<T>>& vss)\n        : m_hsize(vss.size()),\n          m_wsize(vss.front().size()),\n          m_hcap(bitCeil(m_hsize)),\n          m_wcap(bitCeil(m_wsize)),\n          m_vss(m_hcap + 1, Vec<T>(m_wcap + 1, T{}))\n    {\n        for (int i : rep(m_hsize)) {\n            for (int j : rep(m_wsize)) { add(i, j, vss[i][j]); }\n        }\n    }\n    FenwickTree2D(int N, int M, const T& v = T{}) : FenwickTree2D{Vec<Vec<T>>(N, Vec<T>(M, v))} {}\n    void add(int i, int j, const T& v)\n    {\n        assert(0 <= i and i < m_hsize);\n        assert(0 <= j and j < m_wsize);\n        for (int iind = i + 1; iind <= m_hcap; iind += iind & (-iind)) {\n            for (int jind = j + 1; jind <= m_wcap; jind += jind & (-jind)) {\n                m_vss[iind][jind] += v;\n            }\n        }\n    }\n    T sum(int i, int j) const\n    {\n        assert(0 <= i and i <= m_hsize);\n        assert(0 <= j and j <= m_wsize);\n        T sum{};\n        for (int iind = i; iind != 0; iind &= iind - 1) {\n            for (int jind = j; jind != 0; jind &= jind - 1) { sum += m_vss[iind][jind]; }\n        }\n        return sum;\n    }\n    T sum(int imin, int imax, int jmin, int jmax) const\n    {\n        assert(0 <= imin and imin <= imax and imax <= m_hsize);\n        assert(0 <= jmin and jmin <= jmax and jmax <= m_wsize);\n        return sum(imax, jmax) - sum(imax, jmin) - sum(imin, jmax) + sum(imin, jmin);\n    }\n    friend Ostream& operator<<(Ostream& os, const FenwickTree2D& fw)\n    {\n        os << \"[\";\n        for (int i : rep(fw.m_hsize)) {\n            os << \"[\";\n            for (int j : rep(fw.m_wsize)) {\n                os << (i == 0 ? \"\" : \",\") << fw.sum(i, i + 1, j, j + 1);\n            }\n            os << \"]\\n\";\n        }\n        return os;\n    }\n\nprivate:\n    int m_hsize, m_wsize;\n    int m_hcap, m_wcap;\n    Vec<Vec<T>> m_vss;\n};\n",
    "result": "NOT_TESTED",
    "verified_with": []
}