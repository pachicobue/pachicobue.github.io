{
    "code": "#pragma once\n#include \"../common.hpp\"\n#include \"set_moebius.hpp\"\n#include \"set_zeta.hpp\"\ntemplate<typename T>\nVec<T> andConvolute(Vec<T> f, Vec<T> g)\n{\n    const int N = bitCeil(std::max(f.size(), g.size()));\n    f.resize(N), g.resize(N);\n    auto F = setZeta(f, false), G = setZeta(g, false);\n    for (int i : rep(N)) { F[i] *= G[i]; }\n    return setMoebius(F, false);\n}\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/set_power_series/and_convolution.test.cpp",
        "verifications/set_power_series/or_convolution.test.cpp"
    ]
}