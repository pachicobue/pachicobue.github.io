{
    "code": "#pragma once\n#include \"../common.hpp\"\n#include \"low_link.hpp\"\ntemplate<typename T>\nclass TwoEdgeConnectedComponent : public LowLink<T>\n{\npublic:\n    using LowLink<T>::LowLink;\n    using LowLink<T>::isBridge;\n    using LowLink<T>::bridges;\n    TwoEdgeConnectedComponent(const Graph<T>& g) : LowLink<T>(g), m_v(g.v()), m_cs(g.v(), -1)\n    {\n        auto dfs = Fix([&](auto dfs, int u) -> void {\n            m_cs[u] = m_cnum;\n            for (int v : g[u]) {\n                if (isBridge(u, v) or m_cs[v] != -1) { continue; }\n                dfs(v);\n            }\n        });\n        for (int i : rep(g.v())) {\n            if (m_cs[i] != -1) { continue; }\n            dfs(i);\n            m_cnum++;\n        }\n    }\n    int operator[](int v) const\n    {\n        assert(0 <= v and v < m_v);\n        return m_cs[v];\n    }\n    int cnum() const { return m_cnum; }\n    Vec<Vec<int>> groups() const\n    {\n        Vec<Vec<int>> iss(m_v);\n        for (int i : rep(m_v)) { iss[m_cs[i]].push_back(i); }\n        return iss;\n    }\n\nprivate:\n    int m_v;\n    int m_cnum = 0;\n    Vec<int> m_cs;\n};\n",
    "result": "NOT_TESTED",
    "verified_with": []
}