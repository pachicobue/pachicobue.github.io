{
    "code": "#pragma once\n#include \"../common.hpp\"\ntemplate<typename T>\nclass MonotoneCHT\n{\n    using L = Pair<T, T>;\n    static constexpr L NIL = {0, INF<T>};\n    static bool needLess(const L& l1, const L& l2, const L& l3)\n    {\n        const auto [a1, b1] = l1;\n        const auto [a2, b2] = l2;\n        const auto [a3, b3] = l3;\n        const T x12 = floorDiv(b2 - b1, a1 - a2), x23 = floorDiv(b3 - b2, a2 - a3);\n        return x12 >= x23;\n    }\n    static bool comp(const L& l1, const L& l2, T x)\n    {\n        const auto [a1, b1] = l1;\n        const auto [a2, b2] = l2;\n        if (a1 == a2) {\n            return b1 <= b2;\n        } else if (a1 > a2) {\n            return x <= floorDiv(b2 - b1, a1 - a2);\n        } else {\n            return floorDiv(b1 - b2, a2 - a1) < x;\n        }\n    }\n\npublic:\n    MonotoneCHT() : m_prev_x{-INF<T>} {}\n    void addLine(T a, T b)\n    {\n        const L l{a, b};\n        if (m_lines.empty()) {\n            m_lines.push_back(l);\n            return;\n        }\n        auto& [ma, mb] = m_lines.back();\n        assert(ma >= a);\n        if (a == ma) {\n            chmin(mb, b);\n        } else {\n            while (m_lines.size() >= 2) {\n                const int n = m_lines.size();\n                const auto& l0 = m_lines[n - 2];\n                const auto& l1 = m_lines[n - 1];\n                if (not needLess(l0, l1, l)) { break; }\n                m_lines.pop_back();\n            }\n            m_lines.push_back(l);\n        }\n    }\n    L minLine(const T x)\n    {\n        if (m_lines.empty()) { return NIL; }\n        assert(m_prev_x <= x);\n        m_prev_x = x;\n        while (m_lines.size() >= 2) {\n            const auto& l0 = m_lines[0];\n            const auto& l1 = m_lines[1];\n            if (comp(l0, l1, x)) { break; }\n            m_lines.pop_front();\n        }\n        return m_lines.front();\n    }\n\nprivate:\n    T m_prev_x;\n    Deq<L> m_lines;\n};\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/convex_hull_trick/monotone_cht.test.cpp"
    ]
}