{
    "code": "#pragma once\n#include <bits/stdc++.h>\nusing i32 = int;\nusing u32 = unsigned int;\nusing i64 = long long;\nusing u64 = unsigned long long;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\nusing f64 = double;\nusing f80 = long double;\nusing f128 = __float128;\nconstexpr i32 operator\"\" _i32(u64 v) { return v; }\nconstexpr u32 operator\"\" _u32(u64 v) { return v; }\nconstexpr i64 operator\"\" _i64(u64 v) { return v; }\nconstexpr u64 operator\"\" _u64(u64 v) { return v; }\nconstexpr f64 operator\"\" _f64(f80 v) { return v; }\nconstexpr f80 operator\"\" _f80(f80 v) { return v; }\nusing Istream = std::istream;\nusing Ostream = std::ostream;\nusing Str = std::string;\ntemplate<typename T>\nusing Lt = std::less<T>;\ntemplate<typename T>\nusing Gt = std::greater<T>;\ntemplate<int n>\nusing BSet = std::bitset<n>;\ntemplate<typename T1, typename T2>\nusing Pair = std::pair<T1, T2>;\ntemplate<typename... Ts>\nusing Tup = std::tuple<Ts...>;\ntemplate<typename T, int N>\nusing Arr = std::array<T, N>;\ntemplate<typename... Ts>\nusing Deq = std::deque<Ts...>;\ntemplate<typename... Ts>\nusing Set = std::set<Ts...>;\ntemplate<typename... Ts>\nusing MSet = std::multiset<Ts...>;\ntemplate<typename... Ts>\nusing USet = std::unordered_set<Ts...>;\ntemplate<typename... Ts>\nusing UMSet = std::unordered_multiset<Ts...>;\ntemplate<typename... Ts>\nusing Map = std::map<Ts...>;\ntemplate<typename... Ts>\nusing MMap = std::multimap<Ts...>;\ntemplate<typename... Ts>\nusing UMap = std::unordered_map<Ts...>;\ntemplate<typename... Ts>\nusing UMMap = std::unordered_multimap<Ts...>;\ntemplate<typename... Ts>\nusing Vec = std::vector<Ts...>;\ntemplate<typename... Ts>\nusing Stack = std::stack<Ts...>;\ntemplate<typename... Ts>\nusing Queue = std::queue<Ts...>;\ntemplate<typename T>\nusing MaxHeap = std::priority_queue<T>;\ntemplate<typename T>\nusing MinHeap = std::priority_queue<T, Vec<T>, Gt<T>>;\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/wavelet/wavelet_matrix.rangefreq.test.cpp",
        "verifications/data_structure/wavelet/wavelet_matrix.quantile.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/queue.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/deque.test.cpp",
        "verifications/data_structure/sparse_table/disjoint_sparse_table.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rMq.test.cpp",
        "verifications/data_structure/union_find_tree/union_find_tree.test.cpp",
        "verifications/data_structure/segment_tree/segtree_beats.test.cpp",
        "verifications/data_structure/segment_tree/segtree.test.cpp",
        "verifications/data_structure/segment_tree/dual_segtree.test.cpp",
        "verifications/data_structure/segment_tree/lazy_segtree.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.max_right.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.test.cpp",
        "verifications/graph/bellman_ford.test.cpp",
        "verifications/graph/floyd_warshall.test.cpp",
        "verifications/graph/dijkstra.test.cpp",
        "verifications/graph/strongly_connected_components.test.cpp",
        "verifications/graph/tree/least_common_ancestor.test.cpp",
        "verifications/graph/tree/level_ancestor.ut.test.cpp",
        "verifications/graph/tree/level_ancestor.lca.test.cpp",
        "verifications/graph/tree/heavy_light_decomposition.test.cpp",
        "verifications/graph/tree/centroid_decomposition.test.cpp",
        "verifications/graph/tree/diameter.test.cpp",
        "verifications/set_power_series/xor_convolution.test.cpp",
        "verifications/set_power_series/and_convolution.test.cpp",
        "verifications/set_power_series/subset_convolution.test.cpp",
        "verifications/set_power_series/or_convolution.test.cpp",
        "verifications/numerical/convolution.ut.test.cpp",
        "verifications/number/mod_nthroot.yuki.test.cpp",
        "verifications/number/mod_sqrt.test.cpp",
        "verifications/number/divisors.test.cpp",
        "verifications/number/discrete_log.test.cpp",
        "verifications/number/prime_factors.test.cpp",
        "verifications/number/multiplicative_prefix_sum.totient.test.cpp",
        "verifications/number/prime_powersum.primecount.test.cpp",
        "verifications/number/mod_nthroot.test.cpp",
        "verifications/linear_algebra/int_bases.test.cpp",
        "verifications/linear_algebra/bit_bases.ut.test.cpp",
        "verifications/linear_algebra/int_bases.ut.test.cpp",
        "verifications/linear_algebra/bit_bases.test.cpp",
        "verifications/linear_algebra/dynamic_matrix.test.cpp",
        "verifications/linear_algebra/static_matrix.test.cpp",
        "verifications/algorithm/linear_floor_sum.test.cpp",
        "verifications/algorithm/mo.test.cpp",
        "verifications/string/z_algorithm.test.cpp",
        "verifications/string/manacher.test.cpp",
        "verifications/string/morris_pratt.ut.test.cpp",
        "verifications/string/suffix_array.test.cpp",
        "verifications/formal_power_series/berlekamp_massey.test.cpp",
        "verifications/formal_power_series/formal_power_series.exp.test.cpp",
        "verifications/formal_power_series/formal_power_series.log.test.cpp",
        "verifications/formal_power_series/formal_power_series.pow.test.cpp",
        "verifications/formal_power_series/formal_power_series.inv.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution1000000007.test.cpp",
        "verifications/formal_power_series/bostan_mori.test.cpp",
        "verifications/common/container_op.reverseAll.test.cpp",
        "verifications/common/powerInt.test.cpp",
        "verifications/common/container_op.test.cpp",
        "verifications/common/bit_op.test.cpp",
        "verifications/common/container_op.sumAll.test.cpp",
        "verifications/common/container_op.sortAll.test.cpp",
        "verifications/common/chminmax.test.cpp",
        "verifications/common/irange.test.cpp",
        "verifications/common/powerMonoid.test.cpp",
        "verifications/common/int_div.test.cpp",
        "verifications/common/container_op.fillAll.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.segment.test.cpp",
        "verifications/convex_hull_trick/monotone_cht.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.line.test.cpp",
        "verifications/utility/io.test.cpp",
        "verifications/utility/scanner.ut.test.cpp",
        "verifications/utility/nd_vec.ut.test.cpp",
        "verifications/utility/zipper.ut.test.cpp",
        "verifications/utility/printer.ut.test.cpp",
        "verifications/utility/int_nthroot.test.cpp",
        "verifications/utility/nd_rep.ut.test.cpp",
        "verifications/utility/rng.ut.test.cpp",
        "verifications/formal_dirichlet_series/gcd_convolution.test.cpp",
        "verifications/formal_dirichlet_series/lcm_convolution.test.cpp"
    ]
}