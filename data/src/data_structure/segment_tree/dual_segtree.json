{
    "code": "#pragma once\n#include \"../../common.hpp\"\ntemplate<typename OpMonoid>\nclass DualSegTree\n{\n    using F = typename OpMonoid::F;\n    static constexpr F id() { return OpMonoid::id(); }\n\npublic:\n    DualSegTree(const Vec<F>& vs)\n        : m_size(vs.size()),\n          m_half(bitCeil(m_size)),\n          m_depth(bitWidth(m_half)),\n          m_ops(m_half << 1, id())\n    {\n        std::copy(vs.begin(), vs.end(), m_ops.begin() + m_half);\n    }\n    DualSegTree(int N, const F& f = OpMonoid::id()) : DualSegTree{Vec<F>(N, f)} {}\n    F get(int i) const\n    {\n        assert(0 <= i and i < m_size);\n        F ans = id();\n        i += m_half;\n        for (int h : per(m_depth)) { ans = compose(ans, m_ops[i >> h]); }\n        return ans;\n    }\n    void set(int i, const F& f)\n    {\n        assert(0 <= i and i < m_size);\n        i += m_half;\n        clean(i), clean(i + 1);\n        m_ops[i] = f;\n    }\n    void act(int l, int r, const F& f)\n    {\n        assert(0 <= l and r <= m_size);\n        if (l >= r) { return; }\n        int li = l + m_half, ri = r + m_half;\n        clean(li), clean(ri);\n        for (; li < ri; li >>= 1, ri >>= 1) {\n            if (li & 1) { update(li++, f); }\n            if (ri & 1) { update(--ri, f); }\n        }\n    }\n    friend Ostream& operator<<(Ostream& os, const DualSegTree& seg)\n    {\n        os << \"[\";\n        for (int i : rep(seg.m_size)) { os << (i == 0 ? \"\" : \",\") << seg.get(i); }\n        return (os << \"]\\n\");\n    }\n\nprivate:\n    void down(int i)\n    {\n        update(i << 1, m_ops[i]), update(i << 1 | 1, m_ops[i]);\n        m_ops[i] = id();\n    }\n    void clean(int i)\n    {\n        const int b = (i / (i & -i)) >> 1;\n        for (const int h : per(m_depth)) {\n            const int v = i >> h;\n            if (v > b) { break; }\n            down(v);\n        }\n    }\n    void update(int i, const F& f) { m_ops[i] = compose(f, m_ops[i]); }\n    int m_size, m_half, m_depth;\n    Vec<F> m_ops;\n    static inline OpMonoid compose;\n};\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/segment_tree/dual_segtree.test.cpp"
    ]
}