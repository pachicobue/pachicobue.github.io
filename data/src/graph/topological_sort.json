{
    "code": "#pragma once\n#include \"../common.hpp\"\n#include \"graph.hpp\"\ntemplate<typename T>\nPair<bool, Vec<int>> topologicalSort(const Graph<T>& g)\n{\n    const int N = g.v();\n    Vec<int> ans;\n    Vec<int> used(N, 0);\n    auto dfs = Fix([&](auto dfs, int s) -> bool {\n        if (used[s] == 1) {\n            return false;\n        } else if (used[s] == 0) {\n            used[s] = 1;\n            for (int to : g[s]) {\n                if (not dfs(to)) { return false; }\n            }\n            used[s] = 2;\n            ans.push_back(s);\n        }\n        return true;\n    });\n    for (int i : rep(N)) {\n        if (not dfs(i)) { return {false, ans}; }\n    }\n    reverseAll(ans);\n    return {true, ans};\n}\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/graph/strongly_connected_components.test.cpp"
    ]
}