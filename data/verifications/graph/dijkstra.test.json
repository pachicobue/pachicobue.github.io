{
    "code": "// verification-helper: PROBLEM https://judge.yosupo.jp/problem/shortest_path\n#include \"graph/dijkstra.hpp\"\n#include \"utility/printer.hpp\"\n#include \"utility/scanner.hpp\"\nint main()\n{\n    const auto [N, M, S, T] = in.tup<int, int, int, int>();\n    Graph<i64> g(N), rg(N);\n    LOOP (M) {\n        const auto [u, v, c] = in.tup<int, int, i64>();\n        g.addEdge(u, v, c), rg.addEdge(v, u, c);\n    }\n    const auto ds = dijkstra(g, S);\n    if (ds[T] >= INF<i64>) { return out.ln(-1); }\n    using pii = Pair<int, int>;\n    Vec<bool> used(N, false);\n    Vec<pii> ans;\n    int p = T;\n    while (p != S) {\n        used[p] = true;\n        for (UNUSED const auto& [_, pp, cost] : rg[p]) {\n            if (not used[pp] and ds[pp] + cost == ds[p]) {\n                ans.push_back({pp, p});\n                p = pp;\n                break;\n            }\n        }\n    }\n    reverseAll(ans);\n    out.ln(ds[T], ans.size());\n    for (const auto& [u, v] : ans) { out.ln(u, v); }\n    return 0;\n}\n",
    "result": "AC"
}