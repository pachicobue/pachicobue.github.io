{
    "code": "// verification-helper: PROBLEM https://judge.yosupo.jp/problem/range_affine_point_get\n#include \"data_structure/segment_tree/dual_segtree.hpp\"\n#include \"utility/modint.hpp\"\n#include \"utility/scanner.hpp\"\n#include \"utility/printer.hpp\"\n\nusing mint = modint_998244353;\nstruct OpMonoid\n{\n    using F = Pair<mint, mint>;\n    static F id() { return {1, 0}; }\n    F operator()(const F& f1, const F& f2) const\n    {\n        const auto& [a1, b1] = f1;\n        const auto& [a2, b2] = f2;\n        return {a1 * a2, a1 * b2 + b1};\n    }\n};\n\nint main()\n{\n    const auto [N, Q] = in.tup<int, int>();\n    const auto as = in.vec<mint>(N);\n    DualSegTree<OpMonoid> seg(N);\n    LOOP (Q) {\n        const auto t = in.val<int>();\n        if (t == 0) {\n            const auto [l, r, b, c] = in.tup<int, int, mint, mint>();\n            seg.act(l, r, {b, c});\n        } else {\n            const auto i = in.val<int>();\n            const auto& [a, b] = seg.get(i);\n            out.ln(a * as[i] + b);\n        }\n    }\n    return 0;\n}\n",
    "result": "AC"
}