{
    "code": "// verification-helper: UNITTEST\n#include \"common/bit_op.hpp\"\n\nvoid popCountTest()\n{\n    assert(popCount(0x0123456789ABCDEF) == 32);\n    assert(popCount(0x0) == 0);\n}\n\nvoid topBitTest()\n{\n    assert(topBit(0x0123456789ABCDEF) == 56);\n    assert(topBit(0x8000000000000000) == 63);\n    assert(topBit(0xFFFFFFFFFFFFFFFF) == 63);\n    assert(topBit(0x1) == 0);\n    assert(topBit(0x0) == -1);\n}\n\nvoid lowBitTest()\n{\n    assert(lowBit(0x0123456789ABCDEF) == 0);\n    assert(lowBit(0x8000000000000000) == 63);\n    assert(lowBit(0x0) == 64);\n}\n\nvoid bitWidthTest()\n{\n    assert(bitWidth(0x0123456789ABCDEF) == 57);\n    assert(bitWidth(0x8000000000000000) == 64);\n    assert(bitWidth(0x0) == 0);\n}\n\nvoid bitCeilTest()\n{\n    assert(bitCeil(0x0123456789ABCDEF) == 0x0200000000000000);\n    assert(bitCeil(0x8000000000000000) == 0x8000000000000000);\n    assert(bitCeil(0x0) == 1);\n}\n\nvoid bitFloorTest()\n{\n    assert(bitFloor(0x0123456789ABCDEF) == 0x0100000000000000);\n    assert(bitFloor(0x8000000000000000) == 0x8000000000000000);\n    assert(bitFloor(0x8000000000000001) == 0x8000000000000000);\n    assert(bitFloor(0x1) == 1);\n    assert(bitFloor(0x0) == 0);\n}\n\nvoid hasSingleBitTest()\n{\n    assert(hasSingleBit(0x0123456789ABCDEF) == false);\n    assert(hasSingleBit(0x8000000000000000) == true);\n    assert(hasSingleBit(0x8000000000000001) == false);\n    assert(hasSingleBit(0x1) == true);\n    assert(hasSingleBit(0x0) == false);\n}\n\nvoid isBitOnOffTest()\n{\n    const i64 v = 0x3333333333333333;\n    for (int i = 0; i < 64; i++) {\n        assert(isBitOn(v, i) == ((i % 4) < 2));\n        assert(isBitOff(v, i) == not((i % 4) < 2));\n    }\n}\n\nint main()\n{\n    popCountTest();\n    topBitTest();\n    lowBitTest();\n    bitWidthTest();\n    bitCeilTest();\n    bitFloorTest();\n    hasSingleBitTest();\n    isBitOnOffTest();\n    return 0;\n}\n",
    "result": "AC"
}