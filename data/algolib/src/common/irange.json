{
    "code": "#pragma once\n#include \"type.hpp\"\n#include \"macro.hpp\"\nclass irange\n{\nprivate:\n    struct itr\n    {\n        constexpr itr(i64 start = 0, i64 step = 1) : m_cnt{start}, m_step{step} {}\n        constexpr bool operator!=(const itr& it) const { return m_cnt != it.m_cnt; }\n        constexpr i64 operator*() { return m_cnt; }\n        constexpr itr& operator++() { return m_cnt += m_step, *this; }\n        i64 m_cnt, m_step;\n    };\n    i64 m_start, m_end, m_step;\n\npublic:\n    static constexpr i64 cnt(i64 start, i64 end, i64 step)\n    {\n        if (step == 0) { return -1; }\n        const i64 d = (step > 0 ? step : -step);\n        const i64 l = (step > 0 ? start : end);\n        const i64 r = (step > 0 ? end : start);\n        i64 n = (r - l) / d + ((r - l) % d ? 1 : 0);\n        if (l >= r) { n = 0; }\n        return n;\n    }\n    constexpr irange(i64 start, i64 end, i64 step = 1)\n        : m_start{start}, m_end{m_start + step * cnt(start, end, step)}, m_step{step}\n    {\n        assert(step != 0);\n    }\n    constexpr itr begin() const { return itr{m_start, m_step}; }\n    constexpr itr end() const { return itr{m_end, m_step}; }\n};\nconstexpr irange rep(i64 end) { return irange(0, end, 1); }\nconstexpr irange per(i64 rend) { return irange(rend - 1, -1, -1); }\n#define LOOP(n) for (auto _ UNUSED : rep(n))\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/wavelet/wavelet_matrix.rangefreq.test.cpp",
        "verifications/data_structure/wavelet/wavelet_matrix.quantile.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/queue.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/deque.test.cpp",
        "verifications/data_structure/sparse_table/disjoint_sparse_table.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rmq.test.cpp",
        "verifications/data_structure/sparse_table/static_rmq.rMq.test.cpp",
        "verifications/data_structure/union_find_tree/union_find_tree.test.cpp",
        "verifications/data_structure/segment_tree/segtree_beats.test.cpp",
        "verifications/data_structure/segment_tree/segtree.test.cpp",
        "verifications/data_structure/segment_tree/dual_segtree.test.cpp",
        "verifications/data_structure/segment_tree/lazy_segtree.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.max_right.test.cpp",
        "verifications/data_structure/fenwick_tree/fenwick.test.cpp",
        "verifications/graph/bellman_ford.test.cpp",
        "verifications/graph/floyd_warshall.test.cpp",
        "verifications/graph/dijkstra.test.cpp",
        "verifications/graph/strongly_connected_components.test.cpp",
        "verifications/graph/tree/least_common_ancestor.test.cpp",
        "verifications/graph/tree/level_ancestor.ut.test.cpp",
        "verifications/graph/tree/level_ancestor.lca.test.cpp",
        "verifications/graph/tree/heavy_light_decomposition.test.cpp",
        "verifications/graph/tree/centroid_decomposition.test.cpp",
        "verifications/graph/tree/diameter.test.cpp",
        "verifications/set_power_series/xor_convolution.test.cpp",
        "verifications/set_power_series/and_convolution.test.cpp",
        "verifications/set_power_series/subset_convolution.test.cpp",
        "verifications/set_power_series/or_convolution.test.cpp",
        "verifications/numerical/convolution.ut.test.cpp",
        "verifications/number/mod_nthroot.yuki.test.cpp",
        "verifications/number/mod_sqrt.test.cpp",
        "verifications/number/divisors.test.cpp",
        "verifications/number/discrete_log.test.cpp",
        "verifications/number/prime_factors.test.cpp",
        "verifications/number/multiplicative_prefix_sum.totient.test.cpp",
        "verifications/number/prime_powersum.primecount.test.cpp",
        "verifications/number/mod_nthroot.test.cpp",
        "verifications/linear_algebra/int_bases.test.cpp",
        "verifications/linear_algebra/bit_bases.ut.test.cpp",
        "verifications/linear_algebra/int_bases.ut.test.cpp",
        "verifications/linear_algebra/bit_bases.test.cpp",
        "verifications/linear_algebra/dynamic_matrix.test.cpp",
        "verifications/linear_algebra/static_matrix.test.cpp",
        "verifications/algorithm/linear_floor_sum.test.cpp",
        "verifications/algorithm/mo.test.cpp",
        "verifications/string/z_algorithm.test.cpp",
        "verifications/string/manacher.test.cpp",
        "verifications/string/morris_pratt.ut.test.cpp",
        "verifications/string/suffix_array.test.cpp",
        "verifications/formal_power_series/berlekamp_massey.test.cpp",
        "verifications/formal_power_series/formal_power_series.exp.test.cpp",
        "verifications/formal_power_series/formal_power_series.log.test.cpp",
        "verifications/formal_power_series/formal_power_series.pow.test.cpp",
        "verifications/formal_power_series/formal_power_series.inv.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution1000000007.test.cpp",
        "verifications/formal_power_series/bostan_mori.test.cpp",
        "verifications/common/irange.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.segment.test.cpp",
        "verifications/convex_hull_trick/monotone_cht.test.cpp",
        "verifications/convex_hull_trick/li_chao_tree.line.test.cpp",
        "verifications/utility/io.test.cpp",
        "verifications/utility/scanner.ut.test.cpp",
        "verifications/utility/nd_vec.ut.test.cpp",
        "verifications/utility/zipper.ut.test.cpp",
        "verifications/utility/printer.ut.test.cpp",
        "verifications/utility/int_nthroot.test.cpp",
        "verifications/utility/nd_rep.ut.test.cpp",
        "verifications/utility/rng.ut.test.cpp",
        "verifications/formal_dirichlet_series/gcd_convolution.test.cpp",
        "verifications/formal_dirichlet_series/lcm_convolution.test.cpp"
    ]
}