{
    "code": "#pragma once\n#include \"../common.hpp\"\n#include \"divisors_moebius.hpp\"\n#include \"divisors_zeta.hpp\"\ntemplate<typename T>\nVec<T> lcmConvolute(const Vec<T>& f, const Vec<T>& g)\n{\n    const int N = (int)std::min(f.size(), g.size());\n    auto F = divisorsZeta(f, true), G = divisorsZeta(g, true);\n    F.resize(N), G.resize(N);\n    for (int i : rep(N)) { F[i] *= G[i]; }\n    return divisorsMoebius(F, true);\n}\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/formal_dirichlet_series/lcm_convolution.test.cpp"
    ]
}