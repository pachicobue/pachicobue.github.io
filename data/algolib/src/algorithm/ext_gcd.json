{
    "code": "#pragma once\n#include \"../common.hpp\"\ntemplate<typename T>\nconstexpr Pair<T, T> extgcd(const T a, const T b)  // [x,y] -> ax+by=gcd(a,b)\n{\n    static_assert(std::is_signed_v<T>, \"Signed integer is allowed.\");\n    assert(a != 0 or b != 0);\n    if (a >= 0 and b >= 0) {\n        if (a < b) {\n            const auto [y, x] = extgcd(b, a);\n            return {x, y};\n        }\n        if (b == 0) { return {1, 0}; }\n        const auto [x, y] = extgcd(b, a % b);\n        return {y, x - (a / b) * y};\n    } else {\n        auto [x, y] = extgcd(std::abs(a), std::abs(b));\n        if (a < 0) { x = -x; }\n        if (b < 0) { y = -y; }\n        return {x, y};\n    }\n}\ntemplate<typename T>\nconstexpr T inverse(const T a, const T mod)  // ax=gcd(a,M) (mod M)\n{\n    assert(a > 0 and mod > 0);\n    auto [x, y] = extgcd(a, mod);\n    if (x <= 0) { x += mod; }\n    return x;\n}\n",
    "result": "NOT_TESTED",
    "verified_with": [
        "verifications/data_structure/sliding_window_aggregation/queue.test.cpp",
        "verifications/data_structure/sliding_window_aggregation/deque.test.cpp",
        "verifications/data_structure/segment_tree/segtree.test.cpp",
        "verifications/data_structure/segment_tree/dual_segtree.test.cpp",
        "verifications/data_structure/segment_tree/lazy_segtree.test.cpp",
        "verifications/graph/tree/heavy_light_decomposition.test.cpp",
        "verifications/set_power_series/xor_convolution.test.cpp",
        "verifications/set_power_series/and_convolution.test.cpp",
        "verifications/set_power_series/subset_convolution.test.cpp",
        "verifications/set_power_series/or_convolution.test.cpp",
        "verifications/numerical/convolution.ut.test.cpp",
        "verifications/number/mod_nthroot.yuki.test.cpp",
        "verifications/number/mod_sqrt.test.cpp",
        "verifications/number/discrete_log.test.cpp",
        "verifications/number/prime_factors.test.cpp",
        "verifications/number/multiplicative_prefix_sum.totient.test.cpp",
        "verifications/number/mod_nthroot.test.cpp",
        "verifications/linear_algebra/dynamic_matrix.test.cpp",
        "verifications/linear_algebra/static_matrix.test.cpp",
        "verifications/formal_power_series/berlekamp_massey.test.cpp",
        "verifications/formal_power_series/formal_power_series.exp.test.cpp",
        "verifications/formal_power_series/formal_power_series.log.test.cpp",
        "verifications/formal_power_series/formal_power_series.pow.test.cpp",
        "verifications/formal_power_series/formal_power_series.inv.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution.test.cpp",
        "verifications/formal_power_series/formal_power_series.convolution1000000007.test.cpp",
        "verifications/formal_power_series/bostan_mori.test.cpp",
        "verifications/formal_dirichlet_series/gcd_convolution.test.cpp",
        "verifications/formal_dirichlet_series/lcm_convolution.test.cpp"
    ]
}